#!/usr/bin/env python2

# Copyright 2016 TensorHub, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import json
import os
import subprocess
import sys

from tensorboard.backend.event_processing import event_multiplexer
from tensorboard.backend.event_processing import event_accumulator

RUNDIR = None

event_loaders = {}

###################################################################
# Init
###################################################################

def init():
    global RUNDIR
    RUNDIR = os.getenv("RUNDIR")
    if not RUNDIR:
        raise AssertionError("RUNDIR env not set")

###################################################################
# Scalars
###################################################################

def print_scalars():
    print_ktsv(latest_scalars())

def latest_scalars():
    refresh_event_loaders()
    sync_file_system()
    data = {}
    for run, reader in event_loaders.items():
        add_scalars_from_events(reader.Load(), run, data)
    return data

def add_scalars_from_events(events, run, data):
    for event in events:
        if event.HasField("summary"):
            add_scalars_from_summary(event.summary.value, run, event, data)

def add_scalars_from_summary(summary, run, event, data):
    for value in summary:
        if value.HasField("simple_value"):
            add_scalar(
                run, value.tag, event.wall_time, event.step,
                value.simple_value, data)

def add_scalar(run, tag, time, step, value, data):
    vals = data.setdefault(tf_tag_path(run, tag), [])
    vals.append([int(time * 1000), step, legal_json(value)])

def tf_tag_path(run, tag):
    if run and run != ".":
        return "tf/" + run + "/" + tag
    else:
        return "tf/" + tag

def legal_json(val):
    if val != val: # test for float('nan')
        return None
    else:
        return val

def refresh_event_loaders():
    for subdir in event_multiplexer.GetLogdirSubdirectories(RUNDIR):
        name = os.path.relpath(subdir, RUNDIR)
        if name not in event_loaders:
            event_loaders[name] = init_event_loader(subdir)

def init_event_loader(path):
    return event_accumulator._GeneratorFromPath(path)

def sync_file_system():
    try:
        try:
            # Try syncing RUNDIR file system (may fail on some
            # versions of sync)
            subprocess.check_call(
                ["sync", "-f", RUNDIR],
                stderr=open(os.devnull, 'w'))
        except subprocess.CalledProcessError:
            # Fall back on older version of sync without args
            subprocess.check_call(["sync"])
    except Exception, e:
        sys.stderr.write("WARNING: error syncing file system (%s)\n" % e)

###################################################################
# Print
###################################################################

def print_ktsv(vals):
    json.dump({"ktsv": vals}, sys.stdout)
    print_eof()

def print_eof():
    sys.stdout.write("\n\n")
    sys.stdout.flush()

###################################################################
# Main
###################################################################

def main():
    init()
    while sys.stdin.readline():
        print_scalars()
        print_eof()

main()
